
    name: Replace Strings Org
    
    on:
      push:
      workflow_dispatch:
        inputs:
          repository:
            type: string
            description: 'Repository name'
            required: true
    
    jobs:
      replace-strings-org:
        if: ${{ github.event_name != 'push' }}
        runs-on: ubuntu-latest
    
        steps:
          - name: Checkout Repository
            uses: actions/checkout@v4
            with:
              token: ${{ secrets.GK_PAT }}
    
          - name: Set up Python
            uses: actions/setup-python@v4
            with:
              python-version: '3.x'
    
          - name: Install dependencies
            run: |  
              python -m pip install --upgrade pip
              pip install openpyxl pandas
    
          - name: Replace Strings in files based on Excel mapping
            run: |
              import openpyxl, pandas as pd, os
    
              # Load spreadsheet data into DataFrame.
              df = pd.read_excel('${{ github.workspace }}/input_migration/File-Replacement1.xlsx')
    
              # Fetching destination organization based on input repository.
              destination_org = df[df['Repository'] == '${{ github.event.inputs.repository }}']['Target Organization'].values[0]
    
              # Logic to replace strings in files.
              for root, dirs, files in os.walk('${{ github.workspace }}'):
                  for file in files:
                      filepath = os.path.join(root, file)
                      with open(filepath, 'r') as f:
                          content = f.read()
                      content_new = content.replace('gk-aks-Digital', destination_org)
                      with open(filepath, 'w') as f:
                          f.write(content_new)
            env:
              GITHUB_WORKSPACE: ${{ github.workspace }}
            shell: bash
    
          - name: Import GPG key
            run: |
              echo "${GPG_PRIVATE_KEY}" | gpg --batch --import
            env: 
              GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
    
          - name: Add the custom gpg siging program that passes the passphrase to the gpg CLI
            run: |
              rm -rf /tmp/gpg.sh
              echo '#!/bin/bash' >> /tmp/gpg.sh
              echo 'gpg --batch --pinentry-mode=loopback --passphrase $GPG_KEY_PASSPHRASE $@' >> /tmp/gpg.sh
              chmod +x /tmp/gpg.sh
    
          - name: Setup git
            run: |
                git config commit.gpgsign true
                git config user.signingkey $GPG_KEY_ID
                git config gpg.program /tmp/gpg.sh
            env:
                GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
    
          - name: Check for Changes
            id: check_changes
            run: |
              if git diff --quiet; then
                echo "No changes to commit. Skipping commit step."
                echo "::set-output name=changes::false"
              else
                echo "::set-output name=changes::true"
              fi
            shell: bash
     
          - name: Commit Changes
            if: steps.check_changes.outputs.changes == 'true'
            run: |
                git config user.email ${{ secrets.GIT_COMMITTER_EMAIL }}
                git config user.name ${{ secrets.GIT_COMMITTER_NAME }}
                git add .
                git commit -m "Replaced occurances of Old Github Org - $(date +"%Y-%m-%d %H:%M:%S")"
                git push # Replace 'branch-name' with the branch name
            env:
                GPG_KEY_PASSPHRASE: ${{ secrets.PASSPHRASE }}
                GITHUB_WORKSPACE: ${{ github.workspace }}
                GITHUB_TOKEN: ${{ secrets.GK_PAT }}
